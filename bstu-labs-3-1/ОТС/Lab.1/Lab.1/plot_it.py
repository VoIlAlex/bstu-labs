import matplotlib.pyplot as plt
import numpy as np
import argparse
import os


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-p', '--path',
        help='file with values to plot'
    )
    parser.add_argument(
        '-s', '--silent',
        help='use it to suppress plot showing',
        action='store_true'
    )
    args = parser.parse_args()
    return args


def parse_generated_values(file_path):
    """
            Reads values generated by
            generator written in c++.
    """
    with open(file_path, 'r') as f:
        generator_name = f.readline().rstrip()
        parameter_name = f.readline().rstrip()
        values_in_line = f.readline().rstrip()
        values = [int(value)
                  for value in values_in_line.split(',') if value != '']
        values = np.array(values)
        return generator_name, parameter_name, values


if __name__ == '__main__':
    args = parse_args()
    generator_name, parameter_name, values = parse_generated_values(args.path)
    # TODO
    # generated values
    plt.figure(figsize=(7, 11))
    plt.subplot(2, 1, 1)
    plt.scatter(range(1000), values)
    plt.xlabel(parameter_name)
    plt.ylabel('Value')
    plt.title(generator_name)
    # values distribution
    plt.subplot(2, 1, 2)
    plt.hist(values, density=True, rwidth=.8)
    plt.xlabel("value")
    plt.ylabel("probability")
    path_to_save = os.path.join(os.path.dirname(
        args.path),
        generator_name + '_' + parameter_name + '.png')
    plt.savefig(path_to_save)

    # show if not suppressed
    if not args.silent:
        plt.show()
